#! /bin/sh

die() {
    echo
    echo "$@"
    exit 1
}

BASEDIR=$(dirname "$(readlink -f "$0")")

PRERELEASE=0
RELEASE=0
CLEAR="http-cache"
while [ $# -gt 0 ]; do
    key="$1"

  case $key in
    -a|--all)
      CLEAR="all"
      shift # past argument
      ;;
    -p|--pre-release)
      PRERELEASE=1
      shift # past argument
      ;;
    -r|--release)
      RELEASE=1
      shift # past argument
      ;;      
    *)    # unknown option
      shift # past argument
      ;;
  esac
done

PACK=0  
HAS_PACKED=$(grep -R "<IsPackable>true</IsPackable>" . --include *.csproj | head -1)
if [ -n "$HAS_PACKED" ]; then
  PACK=1
fi

BASEDIR=$(dirname "$(readlink -f "$0")")
SOLUTION=$(find "$PWD" -type f -iname "*.sln" | head -1)
[ -z "$SOLUTION" ] && SOLUTION=$(find "$PWD" -type f -iname "*.slnx" | head -1)
[ -z "$SOLUTION" ] && die "No Solution found in $(pwd)"

SOURCE_DIR=$(dirname "$SOLUTION");
[ -z "$SOURCE_DIR" ] && die "No Solution dir found in $SOURCE_DIR"


echo "***** Clearing NuGet cache ($CLEAR)... *****" 
dotnet nuget locals "$CLEAR" --clear  || die "######## Nuget Clear $CLEAR Failed ########"

echo "***** Restoring... *****" 
dotnet tool restore  || die "######## Tool Restore Failed ########"

echo "***** Checking... *****" 
$BASEDIR/buildcheck  || die "######## Build Check Failed ########"

cd "$SOURCE_DIR" || die "Could not change to $SOURCE_DIR"

RESTORE=0
if [ "$PRERELEASE" = "1" ] && 
   [ -f "$SOURCE_DIR/CodeAnalysis.ruleset" ] &&
   [ -f "$SOURCE_DIR/pre-release.rule-settings.json" ]; then
      
    dotnet code-analysis ruleset \
                --ruleset "$SOURCE_DIR/CodeAnalysis.ruleset" \
                --changes "$SOURCE_DIR/pre-release.rule-settings.json" || die "Failed to update $SOURCE_DIR/CodeAnalysis.ruleset"

    RESTORE=1
fi

if [ "$RELEASE" = "1" ] && 
   [ -f "$SOURCE_DIR/CodeAnalysis.ruleset" ] &&
   [ -f "$SOURCE_DIR/release.rule-settings.json" ]; then
      
    dotnet code-analysis ruleset \
                --ruleset "$SOURCE_DIR/CodeAnalysis.ruleset" \
                --changes "$SOURCE_DIR/release.rule-settings.json" || die "Failed to update $SOURCE_DIR/CodeAnalysis.ruleset"

    RESTORE=1
fi

echo "***** Restoring... *****" 
dotnet restore  || die "######## Restore Failed ########"

echo "***** Checking for package vulnerabilities... *****" 
SolutionDir="$SOURCE_DIR/" dotnet list "$SOLUTION" package --vulnerable --include-transitive || die "Vulnerabilities found"

echo "***** Cleaning... *****" 
dotnet clean  || die "######## Clean Failed ########"

echo "***** Building... *****" 
dotnet build \
          --warnaserror \
          --configuration Release \
           --no-restore \
          "-p:ApiCompatGenerateSuppressionFile=true" \
          "-p:ContinuousIntegrationBuild=true" \
          "-p:IsProduction=false" \
          "-p:NoWarn=MSB4241" \
          "-p:Optimize=true" \
          "-p:SuppressNETCoreSdkPreviewMessage=true" \
          "-p:Version=0.0.0.1-test" \
           -nodeReuse:False || die "######## Build Failed ########"

echo "***** Testing... *****" 
dotnet test \
          --warnaserror \
          --configuration Release \
           --no-restore \
           --no-build \
          --filter FullyQualifiedName\!~Integration \
          "-p:ApiCompatGenerateSuppressionFile=true" \
          "-p:ContinuousIntegrationBuild=true" \
          "-p:IsProduction=false" \
          "-p:NoWarn=MSB4241" \
          "-p:Optimize=true" \
          "-p:SuppressNETCoreSdkPreviewMessage=true" \
          "-p:Version=0.0.0.1-test" \
          -nodeReuse:False || die "######## Tests Failed ########"
          
if [ "$PACK" = "1" ]; then          
  echo "***** Packing... *****" 
  dotnet pack \
            --warnaserror \
            --configuration Release \
           --no-restore \
            "-p:ApiCompatGenerateSuppressionFile=true" \
            "-p:ContinuousIntegrationBuild=true" \
            "-p:IncludeSymbols=False" \
            "-p:IsProduction=false" \
            "-p:NoWarn=MSB4241" \
            "-p:Optimize=true" \
            "-p:SuppressNETCoreSdkPreviewMessage=true" \
            "-p:Version=0.0.0.1-test" \
            -nodeReuse:False || die "######## Packing Failed ########"
fi

[ "$RESTORE" = "1" ] && git checkout "$SOURCE_DIR/CodeAnalysis.ruleset"

echo "***** Completed *****" 


 

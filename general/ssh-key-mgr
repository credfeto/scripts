#! /bin/sh


SSH_KEY_DIR=$HOME/.ssh
SSH_HOSTS_FILE=$SSH_KEY_DIR/config
SSH_KEY_ALGORITHM=ed25519

# TODO: define a sane number here - don't want to wait for the end of time, but needs to be secure
# See: https://flak.tedunangst.com/post/new-openssh-key-format-and-bcrypt-pbkdf
#SSH_KEY_ROUNDS=1000000000
SSH_KEY_ROUNDS=1500

# Ensure SSH key directory exists with sane permissions
[ ! -d "$SSH_KEY_DIR" ] && mkdir -p "$SSH_KEY_DIR"
[ -d "$SSH_KEY_DIR" ] && chmod 700 "$SSH_KEY_DIR"

if [ ! -f "$SSH_HOSTS_FILE" ] ;
then
  {
    echo "Host *"
    echo "  # Always use SSH2."
    echo "  Protocol 2"
    echo ""
    echo "  # Prefer public key auth"
    echo "  PasswordAuthentication no"
    echo "  PubkeyAuthentication yes"
    echo "  PreferredAuthentications=publickey"
    echo ""
    echo "  # Require Identity File"
    echo "  IdentitiesOnly yes"  
    echo "  # SSH Agent"
    echo "  AddKeysToAgent no"
    echo ""

  } > "$SSH_HOSTS_FILE"
  chmod 600 "$SSH_HOSTS_FILE"
fi 

PROG="$(basename "$(readlink -f "$0")")"
BASEDIR="$(dirname "$(readlink -f "$0")")"

die() {
    echo
    echo "$@"
    exit 1
}

[ -f "/bin/ssh-keygen" ] || die "ssh-keygen not found"
[ -f "/bin/sed" ] || die "sed not found"
[ -f "/bin/cut" ] || die "cut not found"
[ -f "/bin/grep" ] || die "grep not found"

find_host_file() {
  SEARCH_HOST=$1
  grep "^Host\s" "$SSH_HOSTS_FILE" | cut -d' ' -f2- | while read -r HOST_GROUP;
  do
    if [ "$HOST_GROUP" != "*" ]; then
      for HOST_NAME in $HOST_GROUP;
      do
        if [ "$SEARCH_HOST" = "$HOST_NAME" ]; then
          for FILE_HOST_NAME in $HOST_GROUP;
          do

            TEST_KEY_BASE_NAME="id_$FILE_HOST_NAME"
            TEST_PRIVATE_KEY_FILENAME="$SSH_KEY_DIR/$TEST_KEY_BASE_NAME"
            if [ -f "$TEST_PRIVATE_KEY_FILENAME" ]; then
              echo "$FILE_HOST_NAME"
              return 0
            fi;
          done
        fi
      done
    fi
  done

  return 1
}

add_config_host_entry() {
  HOST=$1
  KEY_BASE_NAME=$1
  
  # TODO - better host processing code
  {
    echo "Host $HOST"
    echo "  IdentityFile ~/.ssh/id_$KEY_BASE_NAME"
    echo "  IdentitiesOnly yes"
    echo "  AddKeysToAgent no"
    echo ""
  } >> "$SSH_HOSTS_FILE"
}

###############################################################################
# create_ssh_key
###############################################################################
create_ssh_key() {
  HOST=
  COMMENT=
  SKIP_PASSWORD=0
  while [ $# -gt 0 ]; do
    key="$1"

    case $key in
      -h|--host)
        HOST="$2"
        shift # past argument
        shift # past value
        ;;
      -c|--comment)
        COMMENT="$2"        
        shift # past argument
        shift # past value
        ;;
      -n|--no-password)
        SKIP_PASSWORD=1        
        shift # past argument
        ;;
      *)    # unknown option
        shift # past argument
        ;;
    esac
  done
  
  [ -z "$HOST" ] && die "--host not specified"
  [ -z "$COMMENT" ] && die "--comment not specified"
  
  HOST_FILE_HOST=$(find_host_file "$HOST")
  [ ! -z "$HOST_FILE_HOST" ] && die "Host already has key"

  KEY_BASE_NAME="id_$HOST"
  PRIVATE_KEY_FILENAME="$SSH_KEY_DIR/$KEY_BASE_NAME"
  PUBLIC_KEY_FILENAME="$SSH_KEY_DIR/$KEY_BASE_NAME.pub"
  [ -f "$PRIVATE_KEY_FILENAME" ] && die "Private key already exists: $PRIVATE_KEY_FILENAME"
  [ -f "$PUBLIC_KEY_FILENAME" ] && die "Public key already exists: $PUBLIC_KEY_FILENAME"
  
  echo "Creating new SSH key for $HOST"
  echo "Public Key: $PRIVATE_KEY_FILENAME"
  [ "$SKIP_PASSWORD" -eq "1" ] && ssh-keygen -a "$SSH_KEY_ROUNDS" -t "$SSH_KEY_ALGORITHM" -C "$COMMENT" -P "" -f "$PRIVATE_KEY_FILENAME"
  echo ssh-keygen -a "$SSH_KEY_ROUNDS" -t "$SSH_KEY_ALGORITHM" -C "$COMMENT" -f "$PRIVATE_KEY_FILENAME" 
  [ "$SKIP_PASSWORD" -eq "0" ] && ssh-keygen -a "$SSH_KEY_ROUNDS" -t "$SSH_KEY_ALGORITHM" -C "$COMMENT" -f "$PRIVATE_KEY_FILENAME"
  
  add_config_host_entry "$HOST" "$KEY_BASE_NAME"
  
  [ -f "$PUBLIC_KEY_FILENAME" ] && cat "$PUBLIC_KEY_FILENAME"
}

###############################################################################
# alias_ssh_key
###############################################################################
alias_ssh_key() {
  HOST=
  HOST_ALIAS=
  while [ $# -gt 0 ]; do
    key="$1"

    case $key in
      -h|--host)
        HOST="$2"
        shift # past argument
        shift # past value
        ;;
      -a|--additional-host)
        HOST_ALIAS="$2"
        shift # past argument
        shift # past value
        ;;
      *)    # unknown option
        shift # past argument
        ;;
    esac
  done
  
  [ -z "$HOST" ] && die "--host not specified"
  [ -z "$HOST_ALIAS" ] && die "--additional-host not specified"

  HOST_FILE_HOST=$(find_host_file "$HOST")
  [ -z "$HOST_FILE_HOST" ] && die "Could not find host key"

  #KEY_BASE_NAME="id_$HOST_FILE_HOST"

  # TODO - check to see if the source host exists and die if not
  # TODO - check to see if the host alias doesn't exist and die if it does
  # TODO - better host processing code
  # TODO - support using an alias for the host whenever --host is specified for things like 'show' and 'use'
  #echo "sed -i s"/Host $HOST/Host $HOST $HOST_ALIAS/"" "$SSH_HOSTS_FILE""
  #-i
  sed -i s"/Host $HOST/Host $HOST $HOST_ALIAS/" "$SSH_HOSTS_FILE"
}

###############################################################################
# rotate_ssh_key
###############################################################################
rotate_ssh_key() {
  HOST=
  COMMENT=
  SKIP_PASSWORD=0
  while [ $# -gt 0 ]; do
    key="$1"

    case $key in
      -h|--host)
        HOST="$2"
        shift # past argument
        shift # past value
        ;;
      -c|--comment)
        COMMENT="$2"        
        shift # past argument
        shift # past value
        ;;
      -n|--no-password)
        SKIP_PASSWORD=1        
        shift # past argument
        ;;
      *)    # unknown option
        shift # past argument
        ;;
    esac
  done
  
  [ -z "$HOST" ] && die "--host not specified"
  [ -z "$COMMENT" ] && die "--comment not specified"
  
  HOST_FILE_HOST=$(find_host_file "$HOST")
  [ -z "$HOST_FILE_HOST" ] && die "Could not find host key"

  KEY_BASE_NAME="id_$HOST_FILE_HOST"
  PRIVATE_KEY_FILENAME="$SSH_KEY_DIR/$KEY_BASE_NAME"
  PUBLIC_KEY_FILENAME="$SSH_KEY_DIR/$KEY_BASE_NAME.pub"
  
  [ ! -f "$PRIVATE_KEY_FILENAME" ] && die "Private key does not exist: $PRIVATE_KEY_FILENAME"
  [ ! -f "$PUBLIC_KEY_FILENAME" ] && die "Public key does not exist: $PUBLIC_KEY_FILENAME"
  [ -f "$PRIVATE_KEY_FILENAME.new" ] && rm "$PRIVATE_KEY_FILENAME.new"
  [ -f "$PRIVATE_KEY_FILENAME.new.pub" ] && rm "$PRIVATE_KEY_FILENAME.new.pub"
  
  echo "Rotating SSH key for $HOST"
  echo "Public Key: $PRIVATE_KEY_FILENAME"
  [ "$SKIP_PASSWORD" -eq "1" ] && ssh-keygen -a "$SSH_KEY_ROUNDS" -t "$SSH_KEY_ALGORITHM" -C "$COMMENT" -P "" -f "$PRIVATE_KEY_FILENAME.new" 
  [ "$SKIP_PASSWORD" -eq "0" ] && ssh-keygen -a "$SSH_KEY_ROUNDS" -t "$SSH_KEY_ALGORITHM" -C "$COMMENT" -f "$PRIVATE_KEY_FILENAME.new"
  
  if [ -f "$PRIVATE_KEY_FILENAME.new" ] && [ -f "$PRIVATE_KEY_FILENAME.new.pub" ]; then
    [ -d "$SSH_KEY_DIR/old" ] || mkdir -p "$SSH_KEY_DIR/old"
    
    # Backup old key files so can recover if needed although this really should be killed for security
    mv -f "$PUBLIC_KEY_FILENAME" "$SSH_KEY_DIR/old/$KEY_BASE_NAME.old.pub"
    mv -f "$PRIVATE_KEY_FILENAME" "$SSH_KEY_DIR/old/$KEY_BASE_NAME.old"
    
    mv -f "$PRIVATE_KEY_FILENAME.new.pub" "$PUBLIC_KEY_FILENAME"
    mv -f "$PRIVATE_KEY_FILENAME.new" "$PRIVATE_KEY_FILENAME"
  fi
  
  [ -f "$PUBLIC_KEY_FILENAME" ] && cat "$PUBLIC_KEY_FILENAME"
}

###############################################################################
# revoke_ssh_key
###############################################################################
revoke_ssh_key()
{
  HOST=
  while [ $# -gt 0 ]; do
    key="$1"

    case $key in
      -h|--host)
        HOST="$2"
        shift # past argument
        shift # past value
        ;;
      *)    # unknown option
        shift # past argument
        ;;
    esac
  done
  
  [ -z "$HOST" ] && die "--host not specified"
  
  HOST_FILE_HOST=$(find_host_file "$HOST")
  [ -z "$HOST_FILE_HOST" ] && die "Could not find host key"

  KEY_BASE_NAME="id_$HOST_FILE_HOST"
  PRIVATE_KEY_FILENAME="$SSH_KEY_DIR/$KEY_BASE_NAME"
  PUBLIC_KEY_FILENAME="$SSH_KEY_DIR/$KEY_BASE_NAME.pub"
  [ ! -f "$PRIVATE_KEY_FILENAME" ] && die "Private key does not exist: $PRIVATE_KEY_FILENAME"
  [ ! -f "$PUBLIC_KEY_FILENAME" ] && die "Public key does not exist: $PUBLIC_KEY_FILENAME"

  [ -d "$SSH_KEY_DIR/old" ] || mkdir -p "$SSH_KEY_DIR/old"
  mv -f "$PRIVATE_KEY_FILENAME" "$SSH_KEY_DIR/old/$KEY_BASE_NAME.revoked"
  mv -f "$PUBLIC_KEY_FILENAME" "$SSH_KEY_DIR/old/$KEY_BASE_NAME.revoked.pub"
  
  # TODO - Remove host entry from SSH config
  # TODO - better host processing code
}

###############################################################################
# show_ssh_key
###############################################################################
show_ssh_key() {
  HOST=
  while [ $# -gt 0 ]; do
    key="$1"

    case $key in
      -h|--host)
        HOST="$2"
        shift # past argument
        shift # past value
        ;;
      *)    # unknown option
        shift # past argument
        ;;
    esac
  done
  
  [ -z "$HOST" ] && die "--host not specified"

  HOST_FILE_HOST=$(find_host_file "$HOST")
  [ -z "$HOST_FILE_HOST" ] && die "Could not find host key"  

  KEY_BASE_NAME="id_$HOST_FILE_HOST"
  PRIVATE_KEY_FILENAME="$SSH_KEY_DIR/$KEY_BASE_NAME"
  PUBLIC_KEY_FILENAME="$SSH_KEY_DIR/$KEY_BASE_NAME.pub"
  [ ! -f "$PRIVATE_KEY_FILENAME" ] && die "Private key does not exist: $PRIVATE_KEY_FILENAME"
  [ ! -f "$PUBLIC_KEY_FILENAME" ] && die "Public key does not exist: $PUBLIC_KEY_FILENAME"
  [ -f "$PUBLIC_KEY_FILENAME" ] && cat "$PUBLIC_KEY_FILENAME"
}


###############################################################################
# use_ssh_key
###############################################################################
use_ssh_key() {
  HOST=
  while [ $# -gt 0 ]; do
    key="$1"

    case $key in
      -h|--host)
        HOST="$2"
        shift # past argument
        shift # past value
        ;;
      *)    # unknown option
        shift # past argument
        ;;
    esac
  done

  [ -z "$HOST" ] && die "--host not specified"

  [ -z "$SSH_AUTH_SOCK" ] && die "SSH_AUTH_SOCK not defined - is ssh-agent running? run systemctl enable --now --user ssh-agent.service"
  
  HOST_FILE_HOST=$(find_host_file "$HOST")
  [ -z "$HOST_FILE_HOST" ] && die "Could not find host key"

  KEY_BASE_NAME="id_$HOST_FILE_HOST"

  PRIVATE_KEY_FILENAME="$SSH_KEY_DIR/$KEY_BASE_NAME"
  PUBLIC_KEY_FILENAME="$SSH_KEY_DIR/$KEY_BASE_NAME.pub"
  [ ! -f "$PRIVATE_KEY_FILENAME" ] && die "Private key does not exist: $PRIVATE_KEY_FILENAME"
  [ ! -f "$PUBLIC_KEY_FILENAME" ] && die "Public key does not exist: $PUBLIC_KEY_FILENAME"
  [ -f "$PUBLIC_KEY_FILENAME" ] && cat "$PUBLIC_KEY_FILENAME"
  ssh-add "$PRIVATE_KEY_FILENAME"
}

###############################################################################
# import_ssh_key
###############################################################################
import_ssh_key() {
  HOST=
  SOURCE=
  while [ $# -gt 0 ]; do
    key="$1"

    case $key in
      -h|--host)
        HOST="$2"
        shift # past argument
        shift # past value
        ;;
      -s|--source)
        SOURCE="$2"
        shift # past argument
        shift # past value
        ;;
      *)    # unknown option
        shift # past argument
        ;;
    esac
  done
  
  [ -z "$HOST" ] && die "--host not specified"
  [ -z "$SOURCE" ] && die "--source not specified"

  HOST_FILE_HOST=$(find_host_file "$HOST")
  [ -z "$HOST_FILE_HOST" ] || die "Host already in the SSH config"
  
  KEY_BASE_NAME="id_$HOST"
  PRIVATE_KEY_FILENAME="$SSH_KEY_DIR/$KEY_BASE_NAME"
  PUBLIC_KEY_FILENAME="$SSH_KEY_DIR/$KEY_BASE_NAME.pub"
  [ -f "$PRIVATE_KEY_FILENAME" ] && die "Private key already exists: $PRIVATE_KEY_FILENAME"
  [ -f "$PUBLIC_KEY_FILENAME" ] && die "Public key already exists: $PUBLIC_KEY_FILENAME"

  [ ! -f "$SOURCE" ] && die "Source private key does not exist: $SOURCE"
  [ ! -f "$SOURCE.pub" ] && die "Source public key does not exist: $SOURCE.pub"

  # TODO - Die if source key is invalid
  
  cp "$SOURCE" "$PRIVATE_KEY_FILENAME"
  cp "$SOURCE.pub" "$PRIVATE_KEY_FILENAME"
  
  add_config_host_entry "$HOST" "$KEY_BASE_NAME"
}

###############################################################################
# audit_ssh_keys
###############################################################################
audit_ssh_keys() {
  for KEY_FILE in ~/.ssh/id_*; do

    if [ -f "$KEY_FILE.pub" ] && [ -f "$KEY_FILE" ] ; then
        FILENAME=$(basename "${KEY_FILE}")
        KEY=$(ssh-keygen -l -f "${KEY_FILE}")
        echo "$FILENAME: $KEY"
    fi | sort
  done
  
  [ -f "$SSH_KEY_DIR/id_rsa" ] && echo "Warning: default id_rsa key files exists"
  [ -f "$SSH_KEY_DIR/id_ed25519" ] && echo "Warning: default id_ed25519 key files exists"
}

###############################################################################
# main
###############################################################################

[ $# -lt 1 ] && die "No action specified"

ACTION=$1
shift

if [ "$ACTION" = "create" ]; then
  create_ssh_key "$@"
elif [ "$ACTION" = "alias" ]; then  
  alias_ssh_key "$@"
elif [ "$ACTION" = "revoke" ]; then
  revoke_ssh_key "$@"
elif [ "$ACTION" = "rotate" ]; then
  rotate_ssh_key "$@"
elif [ "$ACTION" = "show" ]; then
  show_ssh_key "$@"
elif [ "$ACTION" = "use" ]; then
  use_ssh_key "$@"
elif [ "$ACTION" = "import" ]; then
  import_ssh_key "$@"
elif [ "$ACTION" = "audit" ]; then
  audit_ssh_keys "$@"
elif [ "$ACTION" = "help"  ] || [ "$ACTION" = "--?" ] || [ "$ACTION" = "--help" ]; then
  echo "SSH Key manager"
  echo ""
  echo "Usage:"
  echo ""
  echo "Generate a new SSH Key for a host"
  echo " $PROG create --host <host> --comment <comment> [--no-password]"
  echo ""
  echo "Add an alias to use an existing key for another host"
  echo " $PROG alias --host <host> --additional-host <host>"
  echo ""
  echo "Revoke an SSH Key"
  echo " $PROG revoke --host <host>"
  echo ""
  echo "Replace an SSH Key generating a new one"
  echo " $PROG rotate --host <host> --comment <comment> [--no-password]"
  echo ""
  echo "Show the public key for a host"
  echo " $PROG show --host <host>"
  echo ""
  echo "Unlock an SSH Private key for a host and add to the ssh-agent"
  echo " $PROG use --host <host>"
  echo ""
  echo "Audit the encryption details of all installed keys"
  echo " $PROG audit"
else
  die "Unknown action: $ACTION"
fi

# TODO: host strict checking https://blog.g3rt.nl/ssh-host-key-validation-strict-yet-user-friendly.html

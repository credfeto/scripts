#!/bin/bash

PROG=$0

function error_exit {
    echo
    echo "$@"
    exit 1
}
#Trap the killer signals so that we can exit with a good message.
trap "error_exit 'Received signal SIGHUP'" SIGHUP
trap "error_exit 'Received signal SIGINT'" SIGINT
trap "error_exit 'Received signal SIGTERM'" SIGTERM

shopt -s expand_aliases
alias die='error_exit "Error $PROG (@`echo $(( $LINENO - 1 ))`):"'

SOURCE=
SERVER=
USER=
DB=
OUTPUT=
REPORT=
LOG=

source dbenv

while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    -d|--database)
      DB="$2"
      shift # past argument
      shift # past value
      ;;
    -f|--files)
      SOURCE="$2"
      shift # past argument
      shift # past value
      ;;
    -o|--output)
      OUTPUT="$2"
      shift # past argument
      shift # past value
      ;;
    *)    # unknown option
      shift # past argument
      ;;
  esac
done

[ -z "$SOURCE" ] && die "--files not specified"
[ -z "$OUTPUT" ] && die "--output not specified"
[ -z "$SERVER" ] && die "--server not specified"
[ -z "$DB" ] && die "--database not specified"
[ -z "$USER" ] && die "--user not specified"
[ -z "$PASSWORD" ] && die "--password not specified"

FILTER=$SOURCE/Filter.scpf
LOG=$OUTPUT.log
REPORT=$OUTPUT.xml

SQLCOMPARE_SERVER=$(sudo docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mssql)
echo "Running sqlcompare to produce $OUTPUT"
sudo sqlcompare \
  /filter:"$FILTER" \
  /options:ConsiderNextFilegroupInPartitionSchemes,DecryptPost2kEncryptedObjects,DoNotOutputCommentHeader,ForceColumnOrder,IgnoreCertificatesAndCryptoKeys,IgnoreDatabaseAndServerName,IgnoreUserProperties,IgnoreUsersPermissionsAndRoleMemberships,IgnoreWhiteSpace,IgnoreWithElementOrder,IncludeDependencies,NoDeploymentLogging,ThrowOnFileParseFailed,UseCompatibilityLevel \
  /transactionIsolationLevel:SERIALIZABLE \
  /include:staticData \
  /scriptFile:"$OUTPUT" \
  /scripts1:"$SOURCE" \
  /showWarnings \
  /include:Identical \
  /report:"$REPORT" \
  /reportType:Xml \
  /force \
  /OutputWidth:1024 \
  /out:"$LOG" \
  /server2:"$SQLCOMPARE_SERVER" \
  /database2:"$DB" \
  /username2:"$USER" \
  /password2:"$PASSWORD" \
  /assertidentical

#  /scriptFile:"$OUTPUT" \

[ ! -f "$OUTPUT" ] && die "No output generated at $OUTPUT"

echo "Running sqlcmd to import $OUTPUT"
sqlcmd \
  -S "$SERVER" \
  -U "$USER" \
  -P "$PASSWORD" \
  -d "$DB" \
  -b \
  -e \
  -i "$OUTPUT"

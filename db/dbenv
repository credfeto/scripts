#!/bin/bash

PROG=$0
CURRENTDIR=$PWD
echo "Current Dir: $CURRENTDIR"

function error_exit {
    echo
    echo "$@"
    exit 1
}

function upsearch () {
 local slashes=${PWD//[^\/]/}
 local directory="$PWD"
 for (( n=${#slashes}; n>0; --n ))
 do
   if test -e "$directory/$1"; then
     echo "$directory/$1"
     return
   fi
  
   test -e "$directory/.git" && return
   directory="$directory/.."
 done
}

#Trap the killer signals so that we can exit with a good message.
trap "error_exit 'Received signal SIGHUP'" SIGHUP
trap "error_exit 'Received signal SIGINT'" SIGINT
trap "error_exit 'Received signal SIGTERM'" SIGTERM

shopt -s expand_aliases
alias die='error_exit "Error $PROG (@`echo $(( $LINENO - 1 ))`):"'

SERVER=
DB=
USER=
PASSWORD=
SCHEMA=

DB_SETTINGS_FILE=~/.database
[[ -f "$DB_SETTINGS_FILE" ]]; echo "Using $DB_SETTINGS_FILE"
[[ -f "$DB_SETTINGS_FILE" ]]; source $DB_SETTINGS_FILE

LOCAL_DB_SETTINGS_FILE=$(upsearch ".database")
if [ ! -z "$LOCAL_DB_SETTINGS_FILE" ]; then
  echo "Using $LOCAL_DB_SETTINGS_FILE"
  source $LOCAL_DB_SETTINGS_FILE
fi

while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    -U|--user)
      USER="$2"
      shift # past argument
      shift # past value
      ;;
    -P|--password)
      PASSWORD="$2"
      shift # past argument
      shift # past value
      ;;
    -s|--server)
      SERVER="$2"
      shift # past argument
      shift # past value
      ;;
    -d|--database)
      DB="$2"
      shift # past argument
      shift # past value
      ;;
    *)    # unknown option - skip here      
      shift # past argument
      ;;
  esac
done

[ -z "$SERVER" ] && die "--server not specified"
[ -z "$USER" ] && die "--user not specified"
[ -z "$PASSWORD" ] && die "--password not specified"

echo "Server: $SERVER"
echo "User: $USER"
[ ! -z "$DB" ] && echo "DB: $DB"

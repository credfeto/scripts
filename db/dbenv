#!/bin/bash

PROG=$0
CURRENTDIR=$PWD
echo "Current Dir: $CURRENTDIR"

function error_exit {
    echo
    echo "$@"
    exit 1
}

function upsearch () {
 local slashes=${PWD//[^\/]/}
 local directory="$PWD"
 for (( n=${#slashes}; n>0; --n ))
 do
   if test -e "$directory/$1"; then
     echo $directory
     return
   fi
  
   test -e "$directory/.git" && return
   directory="$directory/.."
 done
}

#Trap the killer signals so that we can exit with a good message.
trap "error_exit 'Received signal SIGHUP'" SIGHUP
trap "error_exit 'Received signal SIGINT'" SIGINT
trap "error_exit 'Received signal SIGTERM'" SIGTERM

shopt -s expand_aliases
alias die='error_exit "Error $PROG (@`echo $(( $LINENO - 1 ))`):"'

SERVER=
DB=
USER=
PASSWORD=
SCHEMA=

DB_SETTINGS_FILE=~/.database
[[ -f "$DB_SETTINGS_FILE" ]]; echo "Using $DB_SETTINGS_FILE"
[[ -f "$DB_SETTINGS_FILE" ]]; source $DB_SETTINGS_FILE

LOCAL_DB_SETTINGS_FOLDER=$(upsearch ".database")
if [ ! -z "$LOCAL_DB_SETTINGS_FOLDER" ]; then
  LOCAL_DB_SETTINGS_FOLDER=$(readlink -f "$LOCAL_DB_SETTINGS_FOLDER")
  echo "Using settings from $LOCAL_DB_SETTINGS_FOLDER"
  LOCAL_DB_SETTINGS_FILE="$LOCAL_DB_SETTINGS_FOLDER/.database"
  if [ "$LOCAL_DB_SETTINGS_FILE" != "$DB_SETTINGS_FILE" ]; then
    source $LOCAL_DB_SETTINGS_FILE
    
    if [ ! -z "$DB" ]; then
      [ -z "$SOURCE" ] && SOURCE="$LOCAL_DB_SETTINGS_FOLDER/db"
      REDGATE=~/.redgate
      [ ! -d "$REDGATE" ] && mkdir $REDGATE
      [ -z "$OUTPUT" ] && OUTPUT=~/.redgate/$DB.sql
    fi
  fi
fi

while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    -U|--user)
      USER="$2"
      shift # past argument
      shift # past value
      ;;
    -P|--password)
      PASSWORD="$2"
      shift # past argument
      shift # past value
      ;;
    -s|--server)
      SERVER="$2"
      shift # past argument
      shift # past value
      ;;
    -d|--database)
      DB="$2"
      shift # past argument
      shift # past value
      ;;
    *)    # unknown option - skip here      
      shift # past argument
      ;;
  esac
done

[ -z "$SERVER" ] && die "--server not specified"
[ -z "$USER" ] && die "--user not specified"
[ -z "$PASSWORD" ] && die "--password not specified"

if [ "$SERVER" = "localhost" ]; then
  SQLCOMPARE_SERVER=$(sudo docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mssql)
  if [ ! -z "SQLCOMPARE_SERVER" ]; then
    echo "Overriding localhost with Docker Server"
    SERVER=$SQLCOMPARE_SERVER
  fi  
fi

echo "Server: $SERVER"
echo "User: $USER"
[ ! -z "$DB" ] && echo "DB: $DB"
[ ! -z "$SOURCE" ] && echo "Source: $SOURCE"
[ ! -z "$OUTPUT" ] && echo "Output: $OUTPUT"

